{
  "name": "english",
  "label": "English",
  "locale": {
    "pages": {
      "ImagesDemo": {
        "pageAbout": "Pictures are needed in order to visually demonstrate some information",
        "infoBlock": "You don't have to worry about page loading speed due to large images. The __Image__ component supports __lazy loading__ technology."
      },
      "TextDecoratorsDemo": {
        "pageAbout": "You can customize our text using Material Docs test styling components",
        "infoBlock1": "Decorating text components serve to make the __ information__ on your page __ more responsive__.\n> Highlight more important information into different __ specialized blocks__.",
        "overview": "Overview",
        "nesting": "Nesting",
        "nestedComponents": "Nested components",
        "nestingInfo": "Some decoration components support __nesting__:"
      },
      "HeadersDemo": {
        "pageAbout": "Headers can be used to separate information by sense.",
        "infoBlock1": "You can use 6 types of headers: ```H1```, ```H2```, ```H3```, ```H4```, ```H5```. They differ from each other in size and in that headings below H3 do not draw a dividing line by default and are not added to the automatically generated page content block. The larger the number in the title, the smaller its size. Thus, ```H1``` is the largest heading, and ```H6``` is the smallest.",
        "headersExample": "Headers example",
        "contentAutoGeneration": "Automatic generation of page content",
        "tagsInfo": "To prevent the title from creating paragraphs in the automatic content of the page - pass it the __parameter__ ```noTag```. If the title creates is present in the content - when you hover over it with the mouse - the button for changing the anchor will be displayed on the left for conveniently specifying the place on the page when copying __url__.",
        "noTagInfo": "> By default, for headers ```H1```, ```H2```, ```H3``` __prop__ ```noTag = false```",
        "divider": "Divider",
        "dividerInfo": "To prevent the title from having a separator line - pass it the __ parameter__ ```noDivider```.",
        "noDividerInfo": "> By default, for headers ```H1```, ```H2```, ```H3``` __prop__ ```noDivider = false```",
        "customAnchors": "Custom anchors",
        "anchorInfo": "You can set the anchor for the title manually using the ```id``` parameter. If not specified, the title will automatically generate an anchor from its content."
      },
      "MarkdownDemo": {
        "pageAbout": "Markdown - component, designed to convert text in markdown notation to Material Docs.",
        "infoBlock1": "Markdown is a lightweight markup language that you can use to create articles, notes, etc.",
        "overviewExample": "Overview example",
        "moreInfo": "More info",
        "moreInfoDetails": "If you want to get more info about markdown syntax - see [this guide](https://www.markdownguide.org/basic-syntax/)",
        "deepIntegration": "Deep integration",
        "infoBlock2": "Classically, __markdown__ supports two kinds of code blocks: inline and block. In Material Docs, there are three ways to demonstrate code - using components: ```Code```, ```ExpansionCode```, ```DemoWithCode```. You can select one of these components right in the markdown code.",
        "codeComponents": [
          {
            "name": "Code",
            "key": "code",
            "params": [
              {
                "name": "type",
                "description": "Type of code block. For Code - \"code\""
              },
              {
                "name": "theme",
                "description": "Theme param for Code component."
              },
              {
                "name": "language",
                "description": "Language name for Code component."
              }
            ]
          },
          {
            "name": "Expansion code",
            "key": "expansion-code",
            "params": [
              {
                "name": "type",
                "description": "Type of code block. For ExpansionCode - \"expansion-code\""
              },
              {
                "name": "theme",
                "description": "Theme param for Code component."
              },
              {
                "name": "name",
                "description": "The name param for ExpansionCode element. Will be displayed in H3 header."
              },
              {
                "name": "language",
                "description": "Language name for Code component."
              },
              {
                "name": "collapsedHeight",
                "description": "collapsedHeight param for Code component. This is a code block height when it is collapsed."
              }
            ]
          },
          {
            "name": "Demo with code",
            "key": "demo-with-code",
            "description": "If you want to provide ```DemoWithCode``` element with demo component, you should pass to ```Markdown``` component prop data with object. Then pass key to demo param in markdown code block and ```Markdown``` will get demo component from data.",
            "params": [
              {
                "name": "type",
                "description": "Type of code block. For DemoWithCode - \"demo-with-code\""
              },
              {
                "name": "theme",
                "description": "Theme param for Code component."
              },
              {
                "name": "name",
                "description": "The name param for DemoWithCode element. Will be displayed in H3 header."
              },
              {
                "name": "language",
                "description": "Language name for Code component."
              },
              {
                "name": "demo",
                "description": "Key of variable in data object."
              }
            ]
          }
        ]
      },
      "DocsPageAPI": {
        "pageAbout": "The API documentation of the DocsPage React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DocsPage - react component, designed to provide user with page functional",
        "ComponentNameHeader": "Component name",
        "ComponentNameText": "The DocsPage name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "name",
            "type": "string",
            "default": "",
            "description": "Page name. Route will be generated automatically from name."
          },
          {
            "name": "searchTags",
            "type": "string[]",
            "default": "",
            "description": "Keywords for search engine."
          },
          {
            "name": "searchLabel",
            "type": "string",
            "default": "",
            "description": "Label text, displayed in search result if page match search requirements."
          },
          {
            "name": "searchDescription",
            "type": "string",
            "default": "",
            "description": "Description text, displayed in search result if page match search requirements."
          },
          {
            "name": "noGenerateAutoSearch",
            "type": "boolean",
            "default": "false",
            "description": "If true, page will not generate search items from pages automatically."
          },
          {
            "name": "noAutoMenu",
            "type": "boolean",
            "default": "false",
            "description": "If true, page will not participate in auto menu generation."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "contentItem": "Styles applied to the item element of content panel.",
          "contentItemActive": "Styles applied to the item element of content panel if it is active.",
          "contentLink": "Styles applied to the link of item element of content panel.",
          "copyright": "Styles applied to copyright panel if it shown."
        }
      },
      "DemoWithCodeAPI": {
        "pageAbout": "The API documentation of the DemoWithCode React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DemoWithCode - react component, designed to create code blocks with interactive demo.",
        "ComponentNameText": "The DemoWithCode name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "name",
            "type": "string",
            "default": "",
            "description": "Name of the component. Will be displayed in H3 header if defined."
          },
          {
            "name": "code",
            "type": "string",
            "default": "",
            "description": "Code to display in inner Code block."
          },
          {
            "name": "ratio",
            "type": "AspectRatio",
            "default": "",
            "description": "If defined, demo field will keep input aspect ratio."
          },
          {
            "name": "defaultExpanded",
            "type": "boolean",
            "default": "false",
            "description": "If true - code area will be expanded on startup."
          },
          {
            "name": "noTag",
            "type": "boolean",
            "default": "false",
            "description": "If true and name prop is defined - header with name will not generate tag for content tab."
          },
          {
            "name": "paperContainer",
            "type": "boolean",
            "default": "false",
            "description": "If true - demo content will be wrapped in Paper component."
          },
          {
            "name": "actions",
            "type": "DemoCodeAction[]",
            "default": "",
            "description": "Array of additional actions. The actions will be displayed in the dropdown menu when you click the ExpandMore icon button."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Will be placed in demo block."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "collapse": "Styles applied to the Collapse element, which contains code.",
          "toolbar": "Styles applied to the Toolbar element with icon buttons and name.",
          "paperContainer": "Styles applied to the Paper container element if paperContainer prop is true.",
          "menuButtonLink": "Styles applied to link in extra actions menu.",
          "demo": "Styles applied to demo block."
        }
      },
      "CodeAPI": {
        "pageAbout": "The API documentation of the Code React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Code - react component, designed to create code blocks.",
        "ComponentNameText": "The Code name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "language",
            "type": "string",
            "default": "\"javascript\"",
            "description": "Language name for code highlighter."
          },
          {
            "name": "theme",
            "type": "\"light\"",
            "default": "\"light\" | \"dark\" | \"darcula\"",
            "description": "Code highlighting and background styling type."
          },
          {
            "name": "children",
            "type": "string",
            "default": "",
            "description": "Code to display in code highlighter."
          }
        ],
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "highlighterContainer": "Styles applied to the code highlighter container."
        }
      },
      "PagesGroupAPI": {
        "pageAbout": "The API documentation of the PagesGroup React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "PagesGroup - react component, designed to combine pages in groups for AutoDocsMenu.",
        "ComponentNameText": "The PagesGroup name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "name",
            "type": "string",
            "default": "",
            "description": "Name of the group. Will be displayed on button in menu."
          },
          {
            "name": "getData",
            "type": "(data: PagesGroupData): void",
            "default": "",
            "description": "Callback, provided to get group data without context usage."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "enableCss": false,
        "noCssText": "This is a service component. It doesn't generate html elements."
      },
      "ImageAPI": {
        "pageAbout": "The API documentation of the Image React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Image - react component, designed to show images. Image component uses lazy load technology.",
        "ComponentNameText": "The Image name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "src",
            "type": "string",
            "default": "",
            "description": "Source link. Used to define image path."
          },
          {
            "name": "alt",
            "type": "string",
            "default": "",
            "description": "Alternative text. Will be displayed if image can not load."
          },
          {
            "name": "fullWidth",
            "type": "boolean",
            "default": "false",
            "description": "If true - image will be 100 percent wide."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Elements, which will appear in image caption."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "fullWidth": "Styles applied to the root component if fullWidth prop is true."
        }
      },
      "ListItemAPI": {
        "pageAbout": "The API documentation of the ListItem React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "ListItem - react component, designed to generate list. Component simulates list item component.",
        "ComponentNameText": "The ListItem name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "type",
            "type": "\"circle\" | \"square\" | \"upper-roman\" | \"lower-alpha\" | \"none\"",
            "default": "\"circle\"",
            "description": "Type of list decoration."
          },
          {
            "name": "dense",
            "type": "boolean",
            "default": "false",
            "description": "If true, vertical distance between list items will be smaller."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "typeCircle": "Styles applied to the root component if type prop equals circle.",
          "typeSquare": "Styles applied to the root component if type prop equals square.",
          "typeRoman": "Styles applied to the root component if type prop equals upper-roman.",
          "typeAlpha": "Styles applied to the root component if type prop equals lower-alpha.",
          "typeNone": "Styles applied to the root component if type prop equals none.",
          "list": "Styles applied to the inner ul element.",
          "dense": "Styles applied to the root element if prop dense is true."
        }
      },
      "ExpansionCodeAPI": {
        "pageAbout": "The API documentation of the ExpansionCode React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "ExpansionCode - react component, designed to show code in collapsable blocks. User can view full code or part of code.",
        "ComponentNameText": "The ExpansionCode name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "name",
            "type": "string",
            "default": "",
            "description": "Name of the code block. If defined - it will appear in H3 header in ExpansionCode toolbar."
          },
          {
            "name": "noTag",
            "type": "boolean",
            "default": "false",
            "description": "If true and name prop is true - header will not generate tags fot content panel."
          },
          {
            "name": "collapsedHeight",
            "type": "number | string",
            "default": "100px",
            "description": "Height of the component when it is collapsed."
          },
          {
            "name": "actions",
            "type": "DemoCodeAction[]",
            "default": "",
            "description": "Array of additional actions. The actions will be displayed in the dropdown menu when you click the ExpandMore icon button."
          },
          {
            "name": "theme",
            "type": "\"light\" | \"dark\" | \"darcula\"",
            "default": "\"light\"",
            "description": "Code highlighting and background styling type."
          },
          {
            "name": "language",
            "type": "string",
            "default": "\"javascript\"",
            "description": "Language name for code highlighter."
          },
          {
            "name": "children",
            "type": "string",
            "default": "\"light\"",
            "description": "Code to display in code highlighter. This code will appear in the Code block if component is expanded."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "collapsedCode": "Styles applied to the div element between Collapse component and Code component when code is collapsed.",
          "collapse": "Styles applied to the Collapse component, which contains Code.",
          "toolbar": "Styles applied to the Toolbar component.",
          "codeName": "Styles applied to the H3 header with text from prop name.",
          "menuButtonLink": "Styles applied to link element of actions menu button."
        }
      },
      "BlockAPI": {
        "pageAbout": "The API documentation of the Block React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Block - react component, designed to show slided information blocks, such as tips, notes, etc.",
        "ComponentNameText": "The Block name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "color",
            "type": "\"dark\" | \"light\"",
            "default": "\"light\"",
            "description": "Color styling, which will be applied to block."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "colorLight": "Styles applied to the root element when prop color equals \"light\"",
          "colorDark": "Styles applied to the root element when prop color equals \"dark\""
        }
      },
      "CodeSpanAPI": {
        "pageAbout": "The API documentation of the CodeSpan React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "CodeSpan - react component, designed to show code in monospace font inside inline code block.",
        "ComponentNameText": "The CodeSpan name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "color",
            "type": "\"default\" | \"primary\" | \"secondary\" | \"grey\"",
            "default": "\"default\"",
            "description": "Background color of the inline code block."
          },
          {
            "name": "text",
            "type": "\"white\" | \"black\" | \"inherit\"",
            "default": "\"inherit\"",
            "description": "Text color of code."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "colorDefault": "Styles applied to the root element when prop color equals \"default\"",
          "colorPrimary": "Styles applied to the root element when prop color equals \"primary\"",
          "colorSecondary": "Styles applied to the root element when prop color equals \"secondary\"",
          "colorGrey": "Styles applied to the root element when prop color equals \"grey\"",
          "font": "Styles applied to the root element and defining font properties",
          "textInherit": "Styles applied to the root element when prop text equals \"inherit\"",
          "textWhite": "Styles applied to the root element when prop text equals \"white\"",
          "textBlack": "Styles applied to the root element when prop text equals \"black\""
        }
      },
      "ItalicAPI": {
        "pageAbout": "The API documentation of the Italic React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Italic - react component, designed to make text italic.",
        "ComponentNameText": "The Italic name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "italic": "Styles applied to the root element, provides italic text styling."
        }
      },
      "ListAPI": {
        "pageAbout": "The API documentation of the List React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "List - react component, designed to show code in monospace font inside inline code block.",
        "ComponentNameText": "The List name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "image",
            "type": "string",
            "default": "",
            "description": "List styling image. If defined - will be applied to list-style-image style."
          },
          {
            "name": "styling",
            "type": "\"inside\" | \"outside\" | \"inherit\" | \"revert\" | \"unset\"",
            "default": "\"inside\"",
            "description": "List styling type."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "stylePositionInside": "Styles applied to the root element when prop styling equals \"inside\"",
          "stylePositionOutside": "Styles applied to the root element when prop styling equals \"outside\"",
          "stylePositionInherit": "Styles applied to the root element when prop styling equals \"inherit\"",
          "stylePositionRevert": "Styles applied to the root element when prop styling equals \"revert\"",
          "stylePositionUnset": "Styles applied to the root element when prop styling equals \"unset\""
        }
      },
      "DocsMenuItemAPI": {
        "pageAbout": "The API documentation of the DocsMenuItem React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DocsMenuItem - react component, designed create menu items for <DocsMenu/>.",
        "ComponentNameText": "The DocsMenuItem name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "defaultExpanded",
            "type": "boolean",
            "default": "false",
            "description": "If true, panel will be expanded on startup."
          },
          {
            "name": "textPrimary",
            "type": "string",
            "default": "",
            "description": "Primary text form menu list item."
          },
          {
            "name": "textSecondary",
            "type": "string",
            "default": "",
            "description": "Secondary text for menu list item. Will be displayed in the bottom."
          },
          {
            "name": "icon",
            "type": "string",
            "default": "node",
            "description": "Icon, displayed in left corner. Used to customize menu item appearance."
          },
          {
            "name": "onClick",
            "type": "function(event: any): void",
            "default": "",
            "description": "Callback, will be triggered on onclick event handling."
          },
          {
            "name": "page",
            "type": "string | any",
            "default": "",
            "description": "Page name for redirecting or object structure for routing-manager changeRoute."
          },
          {
            "name": "link",
            "type": "string",
            "default": "",
            "description": "Link to the page, which includes groups. If defined - will be used with highest priority."
          },
          {
            "name": "isCurrent",
            "type": "(function(routeParams, pageRoute, page): boolean) | boolean",
            "default": "false",
            "description": "If equals true or function returned true, button will be active. Used when displayed page, connected to this menu item."
          },
          {
            "name": "dense",
            "type": "boolean",
            "default": "false",
            "description": "If true, compact vertical padding designed for keyboard and mouse input will be used for the list and list items. The prop is available to descendant components as the dense context."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "highlighted": "Styles applied to the root element when prop isCurrent equals or returned true",
          "collapse": "Styles applied to the Collapse element for nested menu items."
        }
      },
      "MarkdownAPI": {
        "pageAbout": "The API documentation of the DocsMenuItem React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DocsMenuItem - react component, designed create menu items for <DocsMenu/>.",
        "ComponentNameText": "The DocsMenuItem name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "inline",
            "type": "boolean",
            "default": "false",
            "description": "If true, markdown container will be inline."
          },
          {
            "name": "data",
            "type": "object",
            "default": "{}",
            "description": "Data structure, used as storage to store components or other data, which can not describe via markdown."
          },
          {
            "name": "children",
            "type": "string | string[]",
            "default": "",
            "description": "Markdown based notation. Used to generate visual elements."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element."
        }
      },
      "TableAPI": {
        "pageAbout": "The API documentation of the Table React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Table - react component, designed to create tables.",
        "ComponentNameText": "The Table name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "component",
            "type": "elementType",
            "default": "\"table\"",
            "description": "The component used for the root node. Either a string to use a HTML element or a component."
          },
          {
            "name": "padding",
            "type": "\"default\" | \"checkbox\" | \"none\"",
            "default": "\"default\"",
            "description": "Allows TableCells to inherit padding of the Table."
          },
          {
            "name": "size",
            "type": "\"small\" | \"medium\"",
            "default": "\"medium\"",
            "description": "Allows TableCells to inherit size of the Table."
          },
          {
            "name": "stickyHeader",
            "type": "boolean",
            "default": "false",
            "description": "Set the header sticky."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "The content of the table, normally TableHead and TableBody."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "stickyHeader": "Styles applied to the root element if stickyHeader={true}."
        }
      },
      "TableRowAPI": {
        "pageAbout": "The API documentation of the TableRow React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "TableRow - react component, designed to create tables.",
        "ComponentNameText": "The TableRow name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "component",
            "type": "elementType",
            "default": "\"tr\"",
            "description": "The component used for the root node. Either a string to use a HTML element or a component."
          },
          {
            "name": "hover",
            "type": "boolean",
            "default": "false",
            "description": "If true, the table row will shade on hover."
          },
          {
            "name": "selected",
            "type": "boolean",
            "default": "false",
            "description": "If true, the table row will have the selected shading."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Should be valid <tr> children such as TableCell."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "selected": "Pseudo-class applied to the root element if selected={true}.",
          "hover": "Pseudo-class applied to the root element if hover={true}.",
          "head": "Styles applied to the root element if table variant=\"head\".",
          "footer": "Styles applied to the root element if table variant=\"footer\"."
        }
      },
      "TableCellAPI": {
        "pageAbout": "The API documentation of the TableCell React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "TableCell - react component, designed to create tables.",
        "ComponentNameText": "The TableCell name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "align",
            "type": "\"center\" | \"inherit\" | \"justify\" | \"left\" | \"right\"",
            "default": "\"inherit\"",
            "description": "Set the text-align on the table cell content.\nMonetary or generally number fields should be right aligned as that allows you to add them up quickly in your head without having to worry about decimals."
          },
          {
            "name": "component",
            "type": "elementType",
            "default": "false",
            "description": "The component used for the root node. Either a string to use a HTML element or a component."
          },
          {
            "name": "padding",
            "type": "\"checkbox\" | \"default\" | \"none\"",
            "default": "\"default\"",
            "description": "Sets the padding applied to the cell. By default, the Table parent component set the value (default)."
          },
          {
            "name": "scope",
            "type": "string",
            "default": "",
            "description": "Set scope attribute."
          },
          {
            "name": "size",
            "type": "\"medium\" | \"small\"",
            "default": "\"medium\"",
            "description": "Specify the size of the cell. By default, the Table parent component set the value (medium)."
          },
          {
            "name": "sortDirection",
            "type": "\"asc\" | \"desc\" | \"false\"",
            "default": "\"false\"",
            "description": "Set aria-sort direction."
          },
          {
            "name": "variant",
            "type": "\"body\" | \"footer\" | \"head\"",
            "default": "\"body\"",
            "description": "Specify the cell type. By default, the TableHead, TableBody or TableFooter parent component set the value."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "The table cell contents."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "head": "Styles applied to the root element if variant=\"head\" or context.table.head.",
          "body": "Styles applied to the root element if variant=\"body\" or context.table.body.",
          "footer": "Styles applied to the root element if variant=\"footer\" or context.table.footer.",
          "sizeSmall": "Styles applied to the root element if size=\"small\".",
          "paddingCheckbox": "Styles applied to the root element if padding=\"checkbox\".",
          "paddingNone": "Styles applied to the root element if padding=\"none\".",
          "alignLeft": "Styles applied to the root element if align=\"left\".",
          "alignCenter": "Styles applied to the root element if align=\"center\".",
          "alignRight": "Styles applied to the root element if align=\"right\".",
          "alignJustify": "Styles applied to the root element if align=\"justify\".",
          "stickyHeader": "Styles applied to the root element if context.table.stickyHeader={true}."
        }
      },
      "TableBodyAPI": {
        "pageAbout": "The API documentation of the TableBody React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "TableBody - react component, designed to create tables.",
        "ComponentNameText": "The TableBody name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "component",
            "type": "elementType",
            "default": "\"tbody\"",
            "description": "The component used for the root node. Either a string to use a HTML element or a component."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "The content of the component, normally TableRow."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element."
        }
      },
      "TableHeadAPI": {
        "pageAbout": "The API documentation of the TableHead React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "TableHead - react component, designed to create tables.",
        "ComponentNameText": "The TableHead name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "component",
            "type": "elementType",
            "default": "\"thead\"",
            "description": "The component used for the root node. Either a string to use a HTML element or a component."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "The content of the component, normally TableRow."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element."
        }
      },
      "BoldAPI": {
        "pageAbout": "The API documentation of the Bold React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Bold - react component, designed to create tables.",
        "ComponentNameText": "The Bold name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "The content of the component."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "bold": "Styles applied to the root element with bold text styling."
        }
      },
      "AutoDocsMenuAPI": {
        "pageAbout": "The API documentation of the AutoDocsMenu React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "AutoDocsMenu - react component, designed create tables.",
        "ComponentNameText": "The AutoDocsMenu name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "layoutData",
            "type": "PagesGroupData",
            "default": "",
            "description": "Pages and groups hierarchy data."
          }
        ],
        "forwardRef": true,
        "enableCss": false,
        "css": {},
        "noCssText": "This component is service and doesn't have any styles."
      },
      "LanguageSelectorAPI": {
        "pageAbout": "The API documentation of the LanguageSelector React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "LanguageSelector - react component, designed to add language selection mechanism and locale management.",
        "ComponentNameText": "The LanguageSelector name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "size",
            "type": "\"small\" | \"large\"",
            "default": "\"large\"",
            "description": "The size of an element. If small - will be displayed just locale icon, if large - locale icon with current language name."
          }
        ],
        "noPropsText": "This component has no props and takes info with useLang hook. It must be placed inside LangContext.Provider",
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element."
        }
      },
      "SearchFieldAPI": {
        "pageAbout": "The API documentation of the SearchField React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "SearchField - react component, designed to add search mechanism.",
        "ComponentNameText": "The SearchField name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "searchData",
            "type": "SearchDataItem[]",
            "default": "",
            "description": "Array of SearchDataItem items to do search from."
          },
          {
            "name": "doSearch",
            "type": "function(query, searchData): Promise<SearchDataItem[]>",
            "default": "",
            "description": "Callback, called on search. If defined, default search function will not be called. Must return array of SearchDataItem."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "rootFocused": "Styles applied to the root element when result item is focused.",
          "input": "Styles applied to the Input element.",
          "iconButton": "Styles applied to the IconButton component.",
          "icon": "Styles applied to the icons.",
          "iconClickable": "Styles applied to the icons with button functional.",
          "popper": "Styles applied to the Popper element.",
          "listPaper": "Styles applied to the Paper element, which contains results List."
        }
      },
      "DocsMenuAPI": {
        "pageAbout": "The API documentation of the DocsMenu React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DocsMenu - react component, designed to create menu.",
        "ComponentNameText": "The DocsMenu name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "dense",
            "type": "boolean",
            "default": "false",
            "description": "If true, menu will have smaller spacing between items."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsMenuItem."
          }
        ],
        "forwardRef": true,
        "enableCss": false,
        "css": {},
        "noCssText": "This is service element. It doesn't have any styles."
      },
      "DocsPagesAPI": {
        "pageAbout": "The API documentation of the DocsPages React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DocsPages - react component, designed to create pages.",
        "ComponentNameText": "The DocsPages name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsPage."
          }
        ],
        "forwardRef": true,
        "enableCss": false,
        "css": {},
        "noCssText": "This is service element. It doesn't have any styles."
      },
      "ListItemContainedAPI": {
        "pageAbout": "The API documentation of the ListItemContained React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "ListItemContained - react component, designed to add list items nesting mechanism.",
        "ComponentNameText": "The ListItemContained name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally ListItem."
          }
        ],
        "forwardRef": true,
        "enableCss": false,
        "css": {},
        "noCssText": "This is service element. It doesn't have any styles."
      },
      "DocsLayoutAPI": {
        "pageAbout": "The API documentation of the DocsLayout React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DocsLayout - react component, designed to create MaterialDocs layout.",
        "ComponentNameText": "The DocsLayout name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "searchData",
            "type": "SearchDataItem[]",
            "default": "",
            "description": "An array of SearchDataItem items to do search from."
          },
          {
            "name": "noGenerateAutoSearch",
            "type": "boolean",
            "default": "false",
            "description": "If true, Material Docs will not generate search items from pages automatically."
          },
          {
            "name": "defaultLang",
            "type": "Lang",
            "default": "",
            "description": "Default language settings."
          },
          {
            "name": "langs",
            "type": "Lang[]",
            "default": "",
            "description": "List of all available langs."
          },
          {
            "name": "onHelpToTranslate",
            "type": "function(lang: Lang): void",
            "default": "",
            "description": "Function, called on help to translate button click. If not defined - button will not be rendered."
          },
          {
            "name": "router",
            "type": "\"hash-router\" | \"browser-router\"",
            "default": "\"browser-router\"",
            "description": "react-router-dom Router type."
          },
          {
            "name": "basename",
            "type": "string",
            "default": "",
            "description": "Basename param for react-router-dom Router."
          },
          {
            "name": "mask",
            "type": "string",
            "default": "\"/*page\"",
            "description": "Mask for routing-manager ChangeRouteProvider routeMask property."
          },
          {
            "name": "noSearchField",
            "type": "boolean",
            "default": "false",
            "description": "If true, search field will not be displayed."
          },
          {
            "name": "noLanguageSelector",
            "type": "boolean",
            "default": "false",
            "description": "If true, language selector will not be displayed."
          },
          {
            "name": "actions",
            "type": "AppBarAction[]",
            "default": "[]",
            "description": "An array of actions. Will be displayed in material-ui IconButton components in Toolbar component inside AppBar."
          },
          {
            "name": "keywords",
            "type": "string[]",
            "default": "",
            "description": "An array of keywords of the docs for search engines. Needs for metadata."
          },
          {
            "name": "author",
            "type": "string",
            "default": "",
            "description": "The author of the docs. Needs for metadata."
          },
          {
            "name": "description",
            "type": "string",
            "default": "",
            "description": "The description of the docs. Needs for metadata."
          },
          {
            "name": "name",
            "type": "string",
            "default": "",
            "description": "Name of the docs. Needs for metadata. Will be displayed in app header. Also you can find this name near version label in side menu drawer."
          },
          {
            "name": "version",
            "type": "string",
            "default": "",
            "description": "Version of the docs. Needs for metadata."
          },
          {
            "name": "logo",
            "type": "string",
            "default": "",
            "description": "A path to the logo image, will be displayed in drawer near name and version."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsMenu and DocsPages."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "appBar": "Styles applied to the AppBar element.",
          "appBarShift": "Styles applied to element, designed to compensate drawer.",
          "menuButton": "Styles applied to the menu button.",
          "hide": "Styles applied to the menu button when drawer opened.",
          "drawer": "Styles applied to the Drawer element.",
          "drawerPaper": "Styles applied to the Paper element inside menu Drawer.",
          "drawerHeader": "Styles applied to the head element inside menu Drawer.",
          "content": "Styles applied to the content block.",
          "contentShift": "Styles applied to the content element to compensate drawer.",
          "headerText": "Styles applied to the Typography in AppBar.",
          "toolbar": "Styles applied to the ToolBar element.",
          "headerIcon": "Styles applied to icons in Toolbar.",
          "version": "Styles applied to version badge in side drawer menu."
        }
      },
      "H1API": {
        "pageAbout": "The API documentation of the H1 React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "H1 - react component, designed to create H1 header.",
        "ComponentNameText": "The MatDocH1 name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "noDivider",
            "type": "boolean",
            "default": "false",
            "description": "If true, bottom divider line will not be displayed."
          },
          {
            "name": "noTag",
            "type": "boolean",
            "default": "false",
            "description": "If true, component will not provide tagging mechanism."
          },
          {
            "name": "id",
            "type": "string",
            "default": "",
            "description": "HTML id for the element to provide tagging mechanism."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsMenu and DocsPages."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "h1": "Styles applied to the h1 element."
        }
      },
      "H2API": {
        "pageAbout": "The API documentation of the H2 React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "H2 - react component, designed to create H2 header.",
        "ComponentNameText": "The MatDocH2 name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "noDivider",
            "type": "boolean",
            "default": "false",
            "description": "If true, bottom divider line will not be displayed."
          },
          {
            "name": "noTag",
            "type": "boolean",
            "default": "false",
            "description": "If true, component will not provide tagging mechanism."
          },
          {
            "name": "id",
            "type": "string",
            "default": "",
            "description": "HTML id for the element to provide tagging mechanism."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsMenu and DocsPages."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "h2": "Styles applied to the h2 element."
        }
      },
      "H3API": {
        "pageAbout": "The API documentation of the H3 React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "H3 - react component, designed to create H3 header.",
        "ComponentNameText": "The MatDocH3 name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "noDivider",
            "type": "boolean",
            "default": "false",
            "description": "If true, bottom divider line will not be displayed."
          },
          {
            "name": "noTag",
            "type": "boolean",
            "default": "false",
            "description": "If true, component will not provide tagging mechanism."
          },
          {
            "name": "id",
            "type": "string",
            "default": "",
            "description": "HTML id for the element to provide tagging mechanism."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsMenu and DocsPages."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "h3": "Styles applied to the h3 element."
        }
      },
      "H4API": {
        "pageAbout": "The API documentation of the H4 React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "H4 - react component, designed to create H4 header.",
        "ComponentNameText": "The MatDocH4 name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "noDivider",
            "type": "boolean",
            "default": "true",
            "description": "If true, bottom divider line will not be displayed."
          },
          {
            "name": "noTag",
            "type": "boolean",
            "default": "true",
            "description": "If true, component will not provide tagging mechanism."
          },
          {
            "name": "id",
            "type": "string",
            "default": "",
            "description": "HTML id for the element to provide tagging mechanism."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsMenu and DocsPages."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "h4": "Styles applied to the h4 element."
        }
      },
      "H5API": {
        "pageAbout": "The API documentation of the H5 React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "H5 - react component, designed to create H5 header.",
        "ComponentNameText": "The MatDocH5 name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "noDivider",
            "type": "boolean",
            "default": "true",
            "description": "If true, bottom divider line will not be displayed."
          },
          {
            "name": "noTag",
            "type": "boolean",
            "default": "true",
            "description": "If true, component will not provide tagging mechanism."
          },
          {
            "name": "id",
            "type": "string",
            "default": "",
            "description": "HTML id for the element to provide tagging mechanism."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsMenu and DocsPages."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "h5": "Styles applied to the h5 element."
        }
      },
      "H6API": {
        "pageAbout": "The API documentation of the H6 React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "H6 - react component, designed to create H6 header.",
        "ComponentNameText": "The MatDocH6 name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "noDivider",
            "type": "boolean",
            "default": "false",
            "description": "If true, bottom divider line will not be displayed."
          },
          {
            "name": "noTag",
            "type": "boolean",
            "default": "false",
            "description": "If true, component will not provide tagging mechanism."
          },
          {
            "name": "id",
            "type": "string",
            "default": "",
            "description": "HTML id for the element to provide tagging mechanism."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsMenu and DocsPages."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "h6": "Styles applied to the h6 element."
        }
      },
      "HeaderAPI": {
        "pageAbout": "The API documentation of the Header React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Header - react component, designed to create headers.",
        "ComponentNameText": "The MatDocHeader name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "heading",
            "type": "1 | 2 | 3 | 4 | 5 | 6",
            "default": "1",
            "description": "Heading size."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsMenu and DocsPages."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "h1": "Styles applied to the header when heading = 1.",
          "h2": "Styles applied to the header when heading = 2.",
          "h3": "Styles applied to the header when heading = 3.",
          "h4": "Styles applied to the header when heading = 4.",
          "h5": "Styles applied to the header when heading = 5.",
          "h6": "Styles applied to the header when heading = 6."
        }
      },
      "TagableAPI": {
        "pageAbout": "The API documentation of the Header React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Header - react component, designed to create headers.",
        "ComponentNameText": "The MatDocHeader name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "variant",
            "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\"",
            "default": "\"h1\"",
            "description": "Variant of header. h1 h2 h3 h4 h5."
          },
          {
            "name": "noDivider",
            "type": "boolean",
            "default": "false",
            "description": "If true, bottom divider line will not be displayed."
          },
          {
            "name": "noTag",
            "type": "boolean",
            "default": "false",
            "description": "If true, component will not provide tagging mechanism."
          },
          {
            "name": "id",
            "type": "string",
            "default": "",
            "description": "HTML id for the element to provide tagging mechanism."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsMenu and DocsPages."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "container": "Styles applied to container element.",
          "h1": "Styles applied to the header when variant = \"h1\".",
          "h2": "Styles applied to the header when variant = \"h2\".",
          "h3": "Styles applied to the header when variant = \"h3\".",
          "h4": "Styles applied to the header when variant = \"h4\".",
          "h5": "Styles applied to the header when variant = \"h5\".",
          "h6": "Styles applied to the header when variant = \"h6\".",
          "anchor": "Styles applied to anchor button.",
          "divider": "Styles applied to bottom divider.",
          "typography": "Styles applied to inner Typography component.",
          "textBlock": "Styles applied to text block.",
          "anchorIcon": "Styles applied to icon in anchor button."
        }
      }
    },
    "common": {
      "spells": {
        "Props": "Props",
        "Import": "Import"
      },
      "ComponentAPI": {
        "importDifferenceText": "You can learn more about the difference by [reading this guide](https://material-ui.com/guides/minimizing-bundle-size/).",
        "customization": "You can override the style of the component thanks to one of these customization points: \n* With a rule name of the  [```classes``` object prop](https://material-ui.com/customization/components/#overriding-styles-with-classes). \n* With a [global class name](https://material-ui.com/customization/components/#overriding-styles-with-global-class-names). \n* With a theme and an [```overrides``` property](https://material-ui.com/customization/globals/#css). \n\n\n If that's not sufficient, you can check the implementation of the component for more detail.",
        "ruleName": "Rule name",
        "ruleDescription": "Description",
        "propName": "Name",
        "propType": "Type",
        "propDefault": "Default",
        "propDescription": "Description",
        "ComponentNameHeader": "Component name",
        "ref": "The ```ref``` is forwarded to the root element."
      }
    }
  }
}