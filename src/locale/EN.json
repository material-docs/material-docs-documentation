{
  "name": "en-us",
  "label": "English",
  "locale": {
    "pages": {
      "TablesDemo": {
        "searchDescription": "Demo of Table parts components.",
        "searchTags": {
          "demo": "demo",
          "table": "table",
          "row": "row",
          "cell": "cell",
          "demonstration": "demonstration"
        },
        "simpleTableHeader": "Simple Table",
        "simpleTableSummary": "Tables are needed to showcase a lot of structured data.",
        "tablesWithMarkdownHeader": "Tables with markdown",
        "tablesWithMarkdownSummary": "You can use the __Markdown__ component to customize tables. Don't forget to set the ```typographyInheritSize``` and ```inline``` props in the __Markdown__ component",
        "moreInfoHeader": "More info",
        "moreInfoSummary": "You can find more info about tables usage [here](https://material-ui.com/components/tables/)."
      },
      "CodeDemo": {
        "searchDescription": "Demo of Code showers components.",
        "searchTags": {
          "demo": "demo",
          "code": "code",
          "showing": "showing",
          "demonstration": "demonstration"
        },
        "globalDetails": "Code showers - these are React components created to enable the user to showcase the source code.",
        "componentsHeader": "Components",
        "codeDetails": "You can use the ```Code``` component to showcase your sources or other code.",
        "expansionCodeDetails": "If you want your code to have additional features such as:\n* Ability to collapse code\n* Ability to copy code to clipboard\n* Ability to add additional actions.\n\n\n  Then ```ExpansionCode``` is the right choice.",
        "demoWithCodeDetails": "The ```DemoWithCode``` component is used to demonstrate the functionality that the code implements. It expands the capabilities of the [```ExpansionCode```](#<expansioncode>) component"
      },
      "ImagesDemo": {
        "pageAbout": "Pictures are needed in order to visually demonstrate some information",
        "infoBlock": "You don't have to worry about page loading speed due to large images. The __Image__ component supports __lazy loading__ technology."
      },
      "TextDecoratorsDemo": {
        "pageAbout": "You can customize our text using Material Docs test styling components",
        "infoBlock1": "Decorating text components serve to make the __ information__ on your page __ more responsive__.\n> Highlight more important information into different __ specialized blocks__.",
        "overview": "Overview",
        "nesting": "Nesting",
        "nestedComponents": "Nested components",
        "nestingInfo": "Some decoration components support __nesting__:"
      },
      "HeadersDemo": {
        "pageAbout": "Headers can be used to separate information by sense.",
        "infoBlock1": "You can use 6 types of headers: ```H1```, ```H2```, ```H3```, ```H4```, ```H5```. They differ from each other in size and in that headings below H3 do not draw a dividing line by default and are not added to the automatically generated page content block. The larger the number in the title, the smaller its size. Thus, ```H1``` is the largest heading, and ```H6``` is the smallest.",
        "headersExample": "Headers example",
        "contentAutoGeneration": "Automatic generation of page content",
        "tagsInfo": "To prevent the title from creating paragraphs in the automatic content of the page - pass it the __parameter__ ```noTag```. If the title creates is present in the content - when you hover over it with the mouse - the button for changing the anchor will be displayed on the left for conveniently specifying the place on the page when copying __url__.",
        "noTagInfo": "> By default, for headers ```H1```, ```H2```, ```H3``` __prop__ ```noTag = false```",
        "divider": "Divider",
        "dividerInfo": "To prevent the title from having a separator line - pass it the __ parameter__ ```noDivider```.",
        "noDividerInfo": "> By default, for headers ```H1```, ```H2```, ```H3``` __prop__ ```noDivider = false```",
        "customAnchors": "Custom anchors",
        "anchorInfo": "You can set the anchor for the title manually using the ```id``` parameter. If not specified, the title will automatically generate an anchor from its content."
      },
      "MarkdownDemo": {
        "pageAbout": "Markdown - component, designed to convert text in markdown notation to Material Docs.",
        "infoBlock1": "Markdown is a lightweight markup language that you can use to create articles, notes, etc.",
        "overviewExample": "Overview example",
        "moreInfo": "More info",
        "moreInfoDetails": "If you want to get more info about markdown syntax - see [this guide](https://www.markdownguide.org/basic-syntax/)",
        "deepIntegration": "Deep integration",
        "infoBlock2": "Classically, __markdown__ supports two kinds of code blocks: inline and block. In Material Docs, there are three ways to demonstrate code - using components: ```Code```, ```ExpansionCode```, ```DemoWithCode```. You can select one of these components right in the markdown code.",
        "codeComponents": [
          {
            "name": "Code",
            "key": "code",
            "params": [
              {
                "name": "type",
                "description": "Type of code block. For Code - \"code\""
              },
              {
                "name": "theme",
                "description": "Theme param for Code component."
              },
              {
                "name": "language",
                "description": "Language name for Code component."
              }
            ]
          },
          {
            "name": "Expansion code",
            "key": "expansion-code",
            "params": [
              {
                "name": "type",
                "description": "Type of code block. For ExpansionCode - \"expansion-code\""
              },
              {
                "name": "theme",
                "description": "Theme param for Code component."
              },
              {
                "name": "name",
                "description": "The name param for ExpansionCode element. Will be displayed in H3 header."
              },
              {
                "name": "language",
                "description": "Language name for Code component."
              },
              {
                "name": "collapsedHeight",
                "description": "collapsedHeight param for Code component. This is a code block height when it is collapsed."
              }
            ]
          },
          {
            "name": "Demo with code",
            "key": "demo-with-code",
            "description": "If you want to provide ```DemoWithCode``` element with demo component, you should pass to ```Markdown``` component prop data with object. Then pass key to demo param in markdown code block and ```Markdown``` will get demo component from data.",
            "params": [
              {
                "name": "type",
                "description": "Type of code block. For DemoWithCode - \"demo-with-code\""
              },
              {
                "name": "theme",
                "description": "Theme param for Code component."
              },
              {
                "name": "name",
                "description": "The name param for DemoWithCode element. Will be displayed in H3 header."
              },
              {
                "name": "language",
                "description": "Language name for Code component."
              },
              {
                "name": "demo",
                "description": "Key of variable in data object."
              }
            ]
          }
        ]
      },
      "DocsPageAPI": {
        "searchDescription": "DocsPage - react component, designed to provide user with page functional",
        "searchTags": {
          "docs": "docs",
          "page": "page",
          "api": "api"
        },
        "props": {
          "name": "Page name. Route will be generated automatically from name.",
          "searchTags": "Keywords for search engine.",
          "searchLabel": "Label text, displayed in search result if page match search requirements.",
          "searchDescription": "Description text, displayed in search result if page match search requirements.",
          "noGenerateAutoSearch": "If true, page will not generate search items from pages automatically.",
          "noAutoMenu": "If true, page will not participate in auto menu generation.",
          "order": "As lower order as higher will be displayed menu item.",
          "children": "Children of an element."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "contentItem": "Styles applied to the item element of content panel.",
          "contentItemActive": "Styles applied to the item element of content panel if it is active.",
          "contentLink": "Styles applied to the link of item element of content panel.",
          "copyright": "Styles applied to copyright panel if it shown."
        }
      },
      "DemoWithCodeAPI": {
        "searchDescription": "DemoWithCode - react component, designed to create code blocks with interactive demo.",
        "searchTags": {
          "demo": "demo",
          "with": "with",
          "api": "api",
          "showing": "showing",
          "code": "code"
        },
        "props": {
          "name": "Name of the component. Will be displayed in H3 header if defined.",
          "code": "Code to display in inner Code block.",
          "ratio": "If defined, demo field will keep input aspect ratio.",
          "defaultExpanded": "If true - code area will be expanded on startup.",
          "noTag": "If true and name prop is defined - header with name will not generate tag for content tab.",
          "paperContainer": "If true - demo content will be wrapped in Paper component.",
          "actions": "Array of additional actions. The actions will be displayed in the dropdown menu when you click the ExpandMore icon button.",
          "p": "Padding of demo block in theme.spacing units.",
          "m": "Margin of demo block in theme.spacing units.",
          "children": "Children of an element. Will be placed in demo block."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "collapse": "Styles applied to the Collapse element, which contains code.",
          "toolbar": "Styles applied to the Toolbar element with icon buttons and name.",
          "paperContainer": "Styles applied to the Paper container element if paperContainer prop is true.",
          "menuButtonLink": "Styles applied to link in extra actions menu.",
          "demo": "Styles applied to demo block."
        }
      },
      "CodeAPI": {
        "searchDescription": "Code - react component, designed to create code blocks.",
        "searchTags": {
          "code": "code",
          "highlight": "highlight",
          "language": "language",
          "api": "api"
        },
        "props": {
          "language": "Language name for code highlighter.",
          "theme": "Code highlighting and background styling type.",
          "children": "Code to display in code highlighter."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "highlighterContainer": "Styles applied to the code highlighter container."
        }
      },
      "PagesGroupAPI": {
        "searchDescription": "PagesGroup - react component, designed to combine pages in groups for AutoDocsMenu.",
        "searchTags": {
          "page": "page",
          "group": "group",
          "gather": "gather",
          "container": "container"
        },
        "props": {
          "name": "Name of the group. Will be displayed on button in menu.",
          "getData": "Callback, provided to get group data without context usage.",
          "order": "As lower order as higher will be displayed menu item.",
          "children": "Children of an element."
        },
        "css": {}
      },
      "ImageAPI": {
        "searchDescription": "Image - react component, designed to show images. Image component uses lazy load technology.",
        "searchTags": {
          "image": "image",
          "lazy": "lazy",
          "load": "load",
          "picture": "picture",
          "card": "card",
          "banner": "banner",
          "logo": "logo"
        },
        "props": {
          "src": "Source link. Used to define image path.",
          "alt": "Alternative text. Will be displayed if image can not load.",
          "fullWidth": "If true - image will be 100 percent wide.",
          "children": "Elements, which will appear in image caption."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "fullWidth": "Styles applied to the root component if fullWidth prop is true."
        }
      },
      "ListItemAPI": {
        "searchDescription": "ListItem - react component, designed to generate list. Component simulates list item component.",
        "searchTags": {
          "list": "list",
          "item": "item",
          "api": "api"
        },
        "props": {
          "type": "Type of list decoration.",
          "dense": "If true, vertical distance between list items will be smaller.",
          "children": "Children of an element."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "typeCircle": "Styles applied to the root component if type prop equals circle.",
          "typeSquare": "Styles applied to the root component if type prop equals square.",
          "typeRoman": "Styles applied to the root component if type prop equals upper-roman.",
          "typeAlpha": "Styles applied to the root component if type prop equals lower-alpha.",
          "typeNone": "Styles applied to the root component if type prop equals none.",
          "list": "Styles applied to the inner ul element.",
          "dense": "Styles applied to the root element if prop dense is true."
        }
      },
      "ExpansionCodeAPI": {
        "searchDescription": "ExpansionCode - react component, designed to show code in collapsable blocks. User can view full code or part of code.",
        "searchTags": {
          "demo": "demo",
          "with": "with",
          "code": "code",
          "api": "api"
        },
        "props": {
          "name": "Name of the code block. If defined - it will appear in H3 header in ExpansionCode toolbar.",
          "noTag": "If true and name prop is true - header will not generate tags fot content panel.",
          "collapsedHeight": "Height of the component when it is collapsed.",
          "actions": "Array of additional actions. The actions will be displayed in the dropdown menu when you click the ExpandMore icon button.",
          "theme": "Code highlighting and background styling type.",
          "language": "Language name for code highlighter.",
          "children": "Code to display in code highlighter. This code will appear in the Code block if component is expanded."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "collapsedCode": "Styles applied to the div element between Collapse component and Code component when code is collapsed.",
          "collapse": "Styles applied to the Collapse component, which contains Code.",
          "toolbar": "Styles applied to the Toolbar component.",
          "codeName": "Styles applied to the H3 header with text from prop name.",
          "menuButtonLink": "Styles applied to link element of actions menu button."
        }
      },
      "BlockAPI": {
        "searchDescription": "Block - react component, designed to show slided information blocks, such as tips, notes, etc.",
        "searchTags": {
          "block": "block",
          "tip": "tip",
          "slided": "slided",
          "separated": "separated",
          "blockquote": "blockquote",
          "quote": "quote"
        },
        "props": {
          "color": "Color styling, which will be applied to block.",
          "children": "Children of an element."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "colorLight": "Styles applied to the root element when prop color equals \"light\"",
          "colorDark": "Styles applied to the root element when prop color equals \"dark\""
        }
      },
      "CodeSpanAPI": {
        "searchDescription": "CodeSpan - react component, designed to show code in monospace font inside inline code block.",
        "searchTags": {
          "code": "code",
          "span": "span",
          "inline": "inline",
          "component": "component",
          "block": "block"
        },
        "props": {
          "color": "Background color of the inline code block.",
          "text": "Text color of code.",
          "children": "Children of an element."
        },
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "colorDefault": "Styles applied to the root element when prop color equals \"default\"",
          "colorPrimary": "Styles applied to the root element when prop color equals \"primary\"",
          "colorSecondary": "Styles applied to the root element when prop color equals \"secondary\"",
          "colorGrey": "Styles applied to the root element when prop color equals \"grey\"",
          "font": "Styles applied to the root element and defining font properties",
          "textInherit": "Styles applied to the root element when prop text equals \"inherit\"",
          "textWhite": "Styles applied to the root element when prop text equals \"white\"",
          "textBlack": "Styles applied to the root element when prop text equals \"black\""
        }
      },
      "ItalicAPI": {
        "searchDescription": "Italic - react component, designed to make text italic.",
        "searchTags": {
          "italic": "italic",
          "font": "font",
          "text": "text",
          "styling": "styling",
          "api": "api"
        },
        "props": {
          "children": "Children of an element."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "italic": "Styles applied to the root element, provides italic text styling."
        }
      },
      "ItalicAPI": {
        "searchDescription": "Italic - react component, designed to make text italic.",
        "searchTags": {
          "locale": "locale",
          "lang": "lang",
          "api": "api"
        },
        "props": {
          "path": "Path to the data in the Lang.locale. Exampele: __\"hello/darkness/my\"__.",
          "children": "Children of the component. Will be displayed by default if can not load data from Lang."
        },
        "css": {}
      },
      "ListAPI": {
        "searchDescription": "List - react component, designed to show code in monospace font inside inline code block.",
        "searchTags": {
          "list": "list",
          "image": "image",
          "styling": "styling",
          "api": "api"
        },
        "props": {
          "image": "List styling image. If defined - will be applied to list-style-image style.",
          "styling": "List styling type.",
          "children": "Children of an element."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "stylePositionInside": "Styles applied to the root element when prop styling equals \"inside\"",
          "stylePositionOutside": "Styles applied to the root element when prop styling equals \"outside\"",
          "stylePositionInherit": "Styles applied to the root element when prop styling equals \"inherit\"",
          "stylePositionRevert": "Styles applied to the root element when prop styling equals \"revert\"",
          "stylePositionUnset": "Styles applied to the root element when prop styling equals \"unset\""
        }
      },
      "DocsMenuItemAPI": {
        "searchDescription": "DocsMenuItem - react component, designed create menu items for <DocsMenu/>.",
        "searchTags": {
          "docs": "docs",
          "menu": "menu",
          "item": "item",
          "api": "api",
          "layout": "layout"
        },
        "props": {
          "defaultExpanded": "If true, panel will be expanded on startup.",
          "textPrimary": "Primary text form menu list item.",
          "textSecondary": "Secondary text for menu list item. Will be displayed in the bottom.",
          "icon": "Icon, displayed in left corner. Used to customize menu item appearance.",
          "onClick": "Callback, will be triggered on onclick event handling.",
          "page": "Page name for redirecting or object structure for routing-manager changeRoute.",
          "link": "Link to the page, which includes groups. If defined - will be used with highest priority.",
          "isCurrent": "If equals true or function returned true, button will be active. Used when displayed page, connected to this menu item.",
          "dense": "If true, compact vertical padding designed for keyboard and mouse input will be used for the list and list items. The prop is available to descendant components as the dense context.",
          "children": "Children of an element."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "highlighted": "Styles applied to the root element when prop isCurrent equals or returned true",
          "collapse": "Styles applied to the Collapse element for nested menu items."
        }
      },
      "MarkdownAPI": {
        "searchDescription": "DocsMenuItem - react component, designed create menu items for <DocsMenu/>.",
        "searchTags": {
          "mark": "mark",
          "down": "down",
          "parser": "parser",
          "interpret": "interpret",
          "layout": "layout",
          "api": "api"
        },
        "props": {
          "inline": "If true, markdown container will be inline.",
          "data": "Data structure, used as storage to store components or other data, which can not describe via markdown.",
          "typographyInheritSize": "Paragraph Typography component will inherit font settings.",
          "locale": "Locale path to get data from. Example: __\"where/is/my/data\"__. Path starts from _Lang.locale_.",
          "children": "Markdown based notation. Used to generate visual elements."
        },
        "css": {
          "root": "Styles applied to the root element."
        }
      },
      "TableAPI": {
        "searchDescription": "Table - react component, designed to create tables.",
        "searchTags": {
          "table": "table",
          "cell": "cell",
          "row": "row",
          "header": "header",
          "api": "api"
        },
        "props": {
          "component": "The component used for the root node. Either a string to use a HTML element or a component.",
          "padding": "Allows TableCells to inherit padding of the Table.",
          "size": "Allows TableCells to inherit size of the Table.",
          "stickyHeader": "Set the header sticky.",
          "children": "The content of the table, normally TableHead and TableBody."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "stickyHeader": "Styles applied to the root element if stickyHeader={true}."
        }
      },
      "TableRowAPI": {
        "searchDescription": "TableRow - react component, designed to create tables.",
        "searchTags": {
          "table": "table",
          "cell": "cell",
          "row": "row",
          "header": "header",
          "api": "api"
        },
        "props": {
          "component": "The component used for the root node. Either a string to use a HTML element or a component.",
          "hover": "If true, the table row will shade on hover.",
          "selected": "If true, the table row will have the selected shading.",
          "children": "Should be valid <tr> children such as TableCell."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "selected": "Pseudo-class applied to the root element if selected={true}.",
          "hover": "Pseudo-class applied to the root element if hover={true}.",
          "head": "Styles applied to the root element if table variant=\"head\".",
          "footer": "Styles applied to the root element if table variant=\"footer\"."
        }
      },
      "TableCellAPI": {
        "searchDescription": "TableCell - react component, designed to create tables.",
        "searchTags": {
          "table": "table",
          "cell": "cell",
          "row": "row",
          "header": "header",
          "api": "api"
        },
        "props": {
          "align": "Set the text-align on the table cell content.\nMonetary or generally number fields should be right aligned as that allows you to add them up quickly in your head without having to worry about decimals.",
          "component": "The component used for the root node. Either a string to use a HTML element or a component.",
          "padding": "Sets the padding applied to the cell. By default, the Table parent component set the value (default).",
          "scope": "Set scope attribute.",
          "size": "Specify the size of the cell. By default, the Table parent component set the value (medium).",
          "sortDirection": "Set aria-sort direction.",
          "variant": "Specify the cell type. By default, the TableHead, TableBody or TableFooter parent component set the value.",
          "children": "The table cell contents."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "head": "Styles applied to the root element if variant=\"head\" or context.table.head.",
          "body": "Styles applied to the root element if variant=\"body\" or context.table.body.",
          "footer": "Styles applied to the root element if variant=\"footer\" or context.table.footer.",
          "sizeSmall": "Styles applied to the root element if size=\"small\".",
          "paddingCheckbox": "Styles applied to the root element if padding=\"checkbox\".",
          "paddingNone": "Styles applied to the root element if padding=\"none\".",
          "alignLeft": "Styles applied to the root element if align=\"left\".",
          "alignCenter": "Styles applied to the root element if align=\"center\".",
          "alignRight": "Styles applied to the root element if align=\"right\".",
          "alignJustify": "Styles applied to the root element if align=\"justify\".",
          "stickyHeader": "Styles applied to the root element if context.table.stickyHeader={true}."
        }
      },
      "TableBodyAPI": {
        "searchDescription": "TableBody - react component, designed to create tables.",
        "searchTags": {
          "table": "table",
          "cell": "cell",
          "row": "row",
          "header": "header",
          "api": "api",
          "body": "body"
        },
        "props": {
          "component": "The component used for the root node. Either a string to use a HTML element or a component.",
          "children": "The content of the component, normally TableRow."
        },
        "css": {
          "root": "Styles applied to the root element."
        }
      },
      "TableHeadAPI": {
        "searchDescription": "TableHead - react component, designed to create tables.",
        "searchTags": {
          "table": "table",
          "cell": "cell",
          "row": "row",
          "header": "header",
          "api": "api",
          "head": "head"
        },
        "props": {
          "component": "The component used for the root node. Either a string to use a HTML element or a component.",
          "children": "The content of the component, normally TableRow."
        },
        "css": {
          "root": "Styles applied to the root element."
        }
      },
      "BoldAPI": {
        "searchDescription": "Bold - react component, designed to create tables.",
        "searchTags": {
          "bold": "bold",
          "font": "font",
          "text": "text",
          "styling": "styling",
          "api": "api"
        },
        "props": {
          "children": "The content of the component."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "bold": "Styles applied to the root element with bold text styling."
        }
      },
      "AutoDocsMenuAPI": {
        "searchTags": {
          "api": "api",
          "auto": "auto",
          "docs": "docs",
          "menu": "menu",
          "layout": "layout"
        },
        "searchDescription": "AutoDocsMenu React component API page.",
        "props": {
          "layoutData": "Pages and groups hierarchy data."
        },
        "css": {}
      },
      "LanguageSelectorAPI": {
        "searchDescription": "LanguageSelector - react component, designed to add language selection mechanism and locale management.",
        "searchTags": {
          "language": "language",
          "locale": "locale",
          "select": "select",
          "api": "api"
        },
        "props": {
          "size": "The size of an element. If small - will be displayed just locale icon, if large - locale icon with current language name."
        },
        "css": {
          "root": "Styles applied to the root element."
        }
      },
      "SearchFieldAPI": {
        "searchDescription": "SearchField - react component, designed to add search mechanism.",
        "searchTags": {
          "search": "search",
          "engine": "engine",
          "selector": "selector",
          "results": "results",
          "api": "api"
        },
        "props": {
          "searchData": "Array of SearchDataItem items to do search from.",
          "doSearch": "Callback, called on search. If defined, default search function will not be called. Must return array of SearchDataItem."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "rootFocused": "Styles applied to the root element when result item is focused.",
          "input": "Styles applied to the Input element.",
          "iconButton": "Styles applied to the IconButton component.",
          "icon": "Styles applied to the icons.",
          "iconClickable": "Styles applied to the icons with button functional.",
          "popper": "Styles applied to the Popper element.",
          "listPaper": "Styles applied to the Paper element, which contains results List."
        }
      },
      "DocsMenuAPI": {
        "searchDescription": "DocsMenu - react component, designed to create menu.",
        "searchTags": {
          "docs": "docs",
          "menu": "menu",
          "container": "container",
          "api": "api"
        },
        "props": {
          "dense": "If true, menu will have smaller spacing between items.",
          "children": "Children of an element. Normally DocsMenuItem."
        },
        "css": {}
      },
      "DocsPagesAPI": {
        "searchDescription": "DocsPages - react component, designed to create pages.",
        "searchTags": {
          "docs": "docs",
          "pages": "pages",
          "container": "container",
          "api": "api"
        },
        "props": {
          "children": "Children of an element. Normally DocsPage."
        },
        "css": {}
      },
      "ListItemContainedAPI": {
        "searchDescription": "ListItemContained - react component, designed to add list items nesting mechanism.",
        "searchTags": {
          "list": "list",
          "item": "item",
          "contain": "contain",
          "api": "api"
        },
        "props": {
          "children": "Children of an element. Normally ListItem."
        },
        "css": {}
      },
      "DocsLayoutAPI": {
        "searchDescription": "DocsLayout - react component, designed to create MaterialDocs layout.",
        "searchTags": {
          "docs": "docs",
          "layout": "layout",
          "main": "main",
          "component": "component",
          "api": "api"
        },
        "props": {
          "searchData": "An array of SearchDataItem items to do search from.",
          "noGenerateAutoSearch": "If true, Material Docs will not generate search items from pages automatically.",
          "defaultLang": "Default language settings.",
          "langs": "List of all available langs.",
          "onHelpToTranslate": "Function, called on help to translate button click. If not defined - button will not be rendered.",
          "router": "react-router-dom Router type.",
          "basename": "Basename param for react-router-dom Router.",
          "mask": "Mask for routing-manager ChangeRouteProvider routeMask property.",
          "noSearchField": "If true, search field will not be displayed.",
          "noLanguageSelector": "If true, language selector will not be displayed.",
          "actions": "An array of actions. Will be displayed in material-ui IconButton components in Toolbar component inside AppBar.",
          "keywords": "An array of keywords of the docs for search engines. Needs for metadata.",
          "author": "The author of the docs. Needs for metadata.",
          "description": "The description of the docs. Needs for metadata.",
          "name": "Name of the docs. Needs for metadata. Will be displayed in app header. Also you can find this name near version label in side menu drawer.",
          "version": "Version of the docs. Needs for metadata.",
          "logo": "A path to the logo image, will be displayed in drawer near name and version.",
          "children": "Children of an element. Normally DocsMenu and DocsPages."
        },
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "appBar": "Styles applied to the AppBar element.",
          "appBarShift": "Styles applied to element, designed to compensate drawer.",
          "menuButton": "Styles applied to the menu button.",
          "hide": "Styles applied to the menu button when drawer opened.",
          "drawer": "Styles applied to the Drawer element.",
          "drawerPaper": "Styles applied to the Paper element inside menu Drawer.",
          "drawerHeader": "Styles applied to the head element inside menu Drawer.",
          "content": "Styles applied to the content block.",
          "contentShift": "Styles applied to the content element to compensate drawer.",
          "headerText": "Styles applied to the Typography in AppBar.",
          "toolbar": "Styles applied to the ToolBar element.",
          "headerIcon": "Styles applied to icons in Toolbar.",
          "version": "Styles applied to version badge in side drawer menu."
        }
      },
      "H1API": {
        "searchDescription": "H1 - react component, designed to create H1 header.",
        "searchTags": {
          "h1": "h1",
          "header": "header",
          "tag": "tag",
          "anchor": "anchor",
          "api": "api"
        },
        "props": {
          "noDivider": "If true, bottom divider line will not be displayed.",
          "noTag": "If true, component will not provide tagging mechanism.",
          "id": "HTML id for the element to provide tagging mechanism.",
          "children": "Children of an element. Normally DocsMenu and DocsPages."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "h1": "Styles applied to the h1 element."
        }
      },
      "H2API": {
        "searchDescription": "H2 - react component, designed to create H2 header.",
        "searchTags": {
          "h2": "h2",
          "header": "header",
          "tag": "tag",
          "anchor": "anchor",
          "api": "api"
        },
        "props": {
          "noDivider": "If true, bottom divider line will not be displayed.",
          "noTag": "If true, component will not provide tagging mechanism.",
          "id": "HTML id for the element to provide tagging mechanism.",
          "children": "Children of an element. Normally DocsMenu and DocsPages."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "h2": "Styles applied to the h2 element."
        }
      },
      "H3API": {
        "searchDescription": "H3 - react component, designed to create H3 header.",
        "searchTags": {
          "h3": "h3",
          "header": "header",
          "tag": "tag",
          "anchor": "anchor",
          "api": "api"
        },
        "props": {
          "noDivider": "If true, bottom divider line will not be displayed.",
          "noTag": "If true, component will not provide tagging mechanism.",
          "id": "HTML id for the element to provide tagging mechanism.",
          "children": "Children of an element. Normally DocsMenu and DocsPages."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "h3": "Styles applied to the h3 element."
        }
      },
      "H4API": {
        "searchDescription": "H4 - react component, designed to create H4 header.",
        "searchTags": {
          "h4": "h4",
          "header": "header",
          "tag": "tag",
          "anchor": "anchor",
          "api": "api"
        },
        "props": {
          "noDivider": "If true, bottom divider line will not be displayed.",
          "noTag": "If true, component will not provide tagging mechanism.",
          "id": "HTML id for the element to provide tagging mechanism.",
          "children": "Children of an element. Normally DocsMenu and DocsPages."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "h4": "Styles applied to the h4 element."
        }
      },
      "H5API": {
        "searchDescription": "H5 - react component, designed to create H5 header.",
        "searchTags": {
          "h5": "h5",
          "header": "header",
          "tag": "tag",
          "anchor": "anchor",
          "api": "api"
        },
        "props": {
          "noDivider": "If true, bottom divider line will not be displayed.",
          "noTag": "If true, component will not provide tagging mechanism.",
          "id": "HTML id for the element to provide tagging mechanism.",
          "children": "Children of an element. Normally DocsMenu and DocsPages."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "h5": "Styles applied to the h5 element."
        }
      },
      "H6API": {
        "searchDescription": "H6 - react component, designed to create H6 header.",
        "searchTags": {
          "h6": "h6",
          "header": "header",
          "tag": "tag",
          "anchor": "anchor",
          "api": "api"
        },
        "props": {
          "noDivider": "If true, bottom divider line will not be displayed.",
          "noTag": "If true, component will not provide tagging mechanism.",
          "id": "HTML id for the element to provide tagging mechanism.",
          "children": "Children of an element. Normally DocsMenu and DocsPages."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "h6": "Styles applied to the h6 element."
        }
      },
      "HeaderAPI": {
        "searchDescription": "Header - react component, designed to create headers.",
        "searchTags": {
          "header": "header",
          "tag": "tag",
          "anchor": "anchor",
          "api": "api"
        },
        "props": {
          "heading": "Heading size.",
          "children": "Children of an element. Normally DocsMenu and DocsPages."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "h1": "Styles applied to the header when heading = 1.",
          "h2": "Styles applied to the header when heading = 2.",
          "h3": "Styles applied to the header when heading = 3.",
          "h4": "Styles applied to the header when heading = 4.",
          "h5": "Styles applied to the header when heading = 5.",
          "h6": "Styles applied to the header when heading = 6."
        }
      },
      "TagableAPI": {
        "searchDescription": "Header - react component, designed to create headers.",
        "searchTags": {
          "header": "header",
          "tag": "tag",
          "anchor": "anchor",
          "api": "api",
          "tagable": "tagable"
        },
        "props": {
          "variant": "Variant of header. h1 h2 h3 h4 h5.",
          "noDivider": "If true, bottom divider line will not be displayed.",
          "noTag": "If true, component will not provide tagging mechanism.",
          "id": "HTML id for the element to provide tagging mechanism.",
          "children": "Children of an element. Normally DocsMenu and DocsPages."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "container": "Styles applied to container element.",
          "h1": "Styles applied to the header when variant = \"h1\".",
          "h2": "Styles applied to the header when variant = \"h2\".",
          "h3": "Styles applied to the header when variant = \"h3\".",
          "h4": "Styles applied to the header when variant = \"h4\".",
          "h5": "Styles applied to the header when variant = \"h5\".",
          "h6": "Styles applied to the header when variant = \"h6\".",
          "anchor": "Styles applied to anchor button.",
          "divider": "Styles applied to bottom divider.",
          "typography": "Styles applied to inner Typography component.",
          "textBlock": "Styles applied to text block.",
          "anchorIcon": "Styles applied to icon in anchor button."
        }
      }
    },
    "extensionDocs": {
      "ReactComponentsDocsExtension": {
        "pages": {
          "ReactComponentApiPageDemo": {
            "searchDescription": "Demo page of ReactComponentApiPage react component.",
            "searchTags": {
              "extension": "extension",
              "component": "component",
              "api": "api",
              "page": "page",
              "preset": "preset"
            }
          },
          "RCDEPropAPI": {
            "searchDescription": "API documentation of the RCDE Prop component.",
            "searchTags": {
              "extension": "extension",
              "api": "api",
              "prop": "prop"
            },
            "props": {
              "name": "A name of the property.",
              "type": "The type of the property.",
              "def": "Default value of the property.",
              "children": "A description of the property."
            },
            "css": {
              "typeLabel": "Styles applied to the property type span wrapper.",
              "nameLabel": "Styles applied to the property name span wrapper.",
              "defaultLabel": "Styles applied to the property default value span wrapper."
            }
          },
          "RCDEStyleAPI": {
            "searchDescription": "API documentation of the RCDE Prop component.",
            "searchTags": {
              "extension": "extension",
              "api": "api",
              "css": "css",
              "style": "style"
            },
            "props": {
              "name": "Name of the CSS rule.",
              "global": "Global class name.",
              "children": "A description of the CSS rule."
            },
            "css": {
              "globalLabel": "Styles applied to the rule global name span wrapper.",
              "nameLabel": "Styles applied to the rule name span wrapper."
            }
          },
          "RCDEReactComponentApiPageAPI": {
            "searchDescription": "API documentation of the RCDE Prop component.",
            "searchTags": {
              "extension": "extension",
              "api": "api",
              "css": "css",
              "style": "style"
            },
            "props": {
              "name": "Name of the CSS rule.",
              "global": "Global class name.",
              "children": "A description of the CSS rule."
            },
            "css": {
              "globalLabel": "Styles applied to the rule global name span wrapper.",
              "nameLabel": "Styles applied to the rule name span wrapper."
            }
          }
        }
      }
    },
    "common": {
      "spells": {
        "Props": "Props",
        "Import": "Import"
      },
      "ComponentAPI": {
        "summary": "The API documentation of the &&name React component. Learn more about the props and the CSS customization points.",
        "importDifferenceText": "You can learn more about the difference by [reading this guide](https://material-ui.com/guides/minimizing-bundle-size/).",
        "customization": "You can override the style of the component thanks to one of these customization points: \n* With a rule name of the  [```classes``` object prop](https://material-ui.com/customization/components/#overriding-styles-with-classes). \n* With a [global class name](https://material-ui.com/customization/components/#overriding-styles-with-global-class-names). \n* With a theme and an [```overrides``` property](https://material-ui.com/customization/globals/#css). \n\n\n If that's not sufficient, you can check the implementation of the component for more detail.",
        "componentName": "## Component name  \nThe ```&&name``` name can be used for providing [default props](https://material-ui.com/customization/globals/#default-props) or [style overrides](https://material-ui.com/customization/globals/#css) at the theme level.",
        "refText": "The ```ref``` is forwarded to the root element.",
        "propsText": "Any other props supplied will be provided to the root element (native element)."
      }
    }
  }
}