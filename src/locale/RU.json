{
  "name": "ru-ru",
  "label": "Русский",
  "locale": {
    "pages": {
      "HostingMaterialDocsOnGHPagesTutorial": {
        "headers": {
          "hostingOnGH": "Хостинг Material Docs на GitHub Pages",
          "projectSetup": "Настройка проекта для GitHub Pages",
          "problem": "Проблема",
          "solutionTheory": "Решение в теории",
          "solutionPractice": "Решение на практике",
          "repoCreating": "Создание репозитория",
          "compilation": "Компиляция",
          "ghPagesSetup": "Настройка GitHub Pages",
          "basicSetup": "Базовая настройка",
          "ownDomainHooking": "Привязывание собственного домена",
          "nextSteps": "Дальнейшие шаги",
          "ghSources": "Исходники на GitHub"
        },
        "prevTutorial": "Этот туториал использует проект, созданный в",
        "prevLesson": "предыдущем уроке",
        "overview": "Material Docs - это одно страничное React приложение, которое использует __react-router-dom__. Это означает, что\nпри переключении между страницами _URL_ меняется без перезагрузки страницы. Когда пользователь обращается на сайт, который \nхостится с помощью GitHub Pages, хостинг вернет страницу __index.thml__ или же ту, которая указана в _URL_. ",
        "overview2": "Проще говоря, если мы захостим Material Docs на GitHub Pages без дополнительной настройки - при перезагрузке страницы \nбудем получать страницу __404 | Not found__.",
        "suggestions": "Для того, чтоб предотвратить данную проблему, предлагается: \n* Создать страницу __404.html__, которая будет помещать путь из _URL_ в __query string__ запроса и делать редирект на \n_URL_, который ведет на __index.html__. \n* На странице __index.html__ мы будем обратно разбирать __query string__ и возвращать все на место __до того, как запустится react__.",
        "jekyll": "Создайте файл __.nojekyll__ в директории __public__. Он нужен для того, чтоб GitHub Pages не использовала фреймворк Jekyll.",
        "jekyllNote": "По умолчанию, GitHub Pages использует",
        "page404": "Теперь, необходимо добавить в директорию __public__ файл __404.html__ с таким содержанием:",
        "segmentCount": "> Переменная ___segmentCount___ указывает количество элементов пути, которые не надо сериализовать.  \n> В случае GitHub Pages - необходимо выставить значение ___segmentCount___ = 1.  \n> Если вы собираетесь привязать собственный домен - посчитайте ___segmentCount___ и выставьте его.",
        "pageIndex": "Далее, добавьте в файл __index.html__ в тэг _head_ следующий код:",
        "compiling": "Теперь, осталось скомпилировать Material Docs и настроить GitHub Pages :)",
        "repoCreation": "Создайте репозиторий на _GitHub_ с любым названием, в нашем случае - ___material-docs-example-project___. После, \nзагрузите в него файлы с помощью любого программного обеспечения на ваше усмотрение.",
        "packageSetup": "> В файле __package.json__ добавьте поле _homepage_ с адресом страницы на GitHub Pages.  \n> Пример адреса",
        "building": "Для того, чтоб разместить документацию на GitHub Pages, необходимо скомпилировать проект. Для этого, необходимо выполнить\nкоманду в директории, где находится файл ",
        "for": "Для",
        "dirSetup": "Таким образом мы получили практически готовую к публикации веб страницу в директории __build__.  \nПереименуйте эту директорию в __docs__.",
        "settings": "Зайдите в раздел __Settings__ своего репозитория и найдите там подраздел __GitHub Pages__.",
        "source": "В разделе __Source__ выберите целевую ветку и в поле __директория__ выберите ___/docs___. Сохраните настройки.",
        "hostingSetup": "> Для примера, мы будем использовать поддомен ___example.material-docs.com___  \n> _Интерфейс управления доменом может отличаться в зависимости от вашего хостинга. В примере хостинг_ __Imena.ua__",
        "hostingSettings": "Заходим в настройки домена и добавляем запись:",
        "hostingComment": "> Если вы используете не поддомен - вместо _example_ введите ___www___  \n> _185.199.111.153 - адрес GitHub Pages на момент создания туториала._",
        "hostingSteps": "* Посчитайте значение параметра ___segmentCount___ в файле __404.html__. ([Как это сделать](#решение-на-практике)) \n* В файле __package.json__ выставьте __свой домен__ в поле _homepage_.\n* Добавляем домен в настройки GitHub Pages в поле для домена.",
        "githubExample": "Вы можете найти этот пример на",
        "here": "здесь"
      },
      "CreatingMaterialDocsTutorial": {
        "headers": {
          "creatingMaterialDocs": "Создание Material Docs",
          "creatingProject": "Создание проекта",
          "materialDocsSetup": "Установка Material Docs",
          "indexSetup": "Настройка index.html",
          "extraFilesDeleting": "Удаление ненужных файлов",
          "creatingDocs": "Создание документации",
          "basicStructure": "Базовая структура",
          "creatingPage": "Создание страницы",
          "creatingPageComponent": "Создание страничного компонента",
          "creatingAnotherPage": "Создадим еще одну страницу",
          "pagesGrouping": "Группирование страниц",
          "pagesRedirecting": "Переадресация между страницами",
          "result": "Результат",
          "gitHubSources": "Исходники на GitHub"
        },
        "creatingProjectText": "Создадим новый проект с помощью утилиты __create-react-app__. Подробнее об этой утилите [здесь](&&createReactAppLink).  \nМы назвали проект _material-docs-example-project_ :).",
        "setup": "После того, как проект создан - надо установить Material Docs.  ",
        "withYarn": "С помощью __yarn__:",
        "withNpm": "С помощью __npm__:",
        "indexSetup": "Material Docs использует шрифт _Roboto_, давайте установим его.\nВ директории __public__ добавьте в файл ___index.html___ следующее:\n",
        "indexOverview": "Файл ___index.html___ должен выглядеть примерно так:",
        "deleteFiles": "Вы можете удалить файлы:",
        "basicStructure": "Для начала, создадим в файле __index.js__ следующую структуру:",
        "indexJsDescription": "Это базовая структура для приложения Material Docs.  \nМы указали следующие параметры для компонента ```<DocsLayout/>```:",
        "props": {
          "name": "Название документации.",
          "version": "Версия документации.",
          "logo": "Путь к картинке логотипу.",
          "keywords": "Ключевые слова страницы для того, чтоб поисковые движки могли проиндексировать её.",
          "description": "Описание страницы для метаданных.",
          "author": "Имя автора."
        },
        "moreInfo": "Больше информации о компонентах вы можете получить в разделе __Component APIs__ этой документации. К примеру,\nвот [__документация компонента__ ```<DocsLayout/>```]().  \n\nВ компоненте ```<DocsMenu/>``` хранится информация о структуре меню. Компонент ```<AutoDocsMenu/>``` позволяет \nне задумываться о создании меню вручную.  \n\nВнутри компонента ```<DocsPages/>``` будут находиться страницы.  ",
        "creatingPage": "Приступим к написанию страницы с информацией. Создадим страницу о себе:",
        "creatingPageComponent": "Для того, чтоб было удобнее редактировать страницы мы рекомендуем создавать страничные компоненты и размещать их в \nотдельных файлах. Например, обернем нашу страницу в компонент:",
        "pagesGrouping": "Для того, чтоб автоматическое меню могло создавать группы страниц, их надо оборачивать в компонент ```<PagesGroup/>```. \nДавайте обернём страницу FirstPage в группу \"My Group\"",
        "redirecting": "У компонента ```<Link/>``` есть параметр ___page___, в который передается путь  внутренней странице. \nТак как страница, на которую мы хотим сделать переадресацию находится в группе __My Group__ - путь будет выглядеть так:",
        "githubExample": "Вы можете найти этот пример на GitHub [здесь](&&gitHubSource)"
      },
      "TablesDemo": {
        "searchDescription": "Demo of Table parts components.",
        "searchTags": {
          "demo": "demo",
          "table": "table",
          "row": "row",
          "cell": "cell",
          "demonstration": "demonstration",
          "table_ru": "таблицф",
          "demo_ru": "думо"
        },
        "simpleTableHeader": "Простая таблица",
        "simpleTableSummary": "Таблицы нужны для демонстрации большого количества структурированных данных.",
        "tablesWithMarkdownHeader": "Таблицы с markdown",
        "tablesWithMarkdownSummary": "Для кастомизации таблиц вы можете использовать компонент __Markdown__. Не забудьте выставить пропы ```typographyInheritSize``` и ```inline``` в компоненте __Markdown__",
        "moreInfoHeader": "Больше информации",
        "moreInfoSummary": "Вы можете узнать больше информации о настройке таблиц [тут](https://material-ui.com/components/tables/)."
      },
      "CodeDemo": {
        "searchDescription": "Демонстрация космпонентов Code showers",
        "searchTags": {
          "demo": "demo",
          "code": "code",
          "showing": "showing",
          "demonstration": "demonstration",
          "code_ru": "код",
          "demo_ru": "демо"
        },
        "globalDetails": "Code showers - это React компоненты, созданные для того, чтоб дать возможность пользователю продемонстрировать исходный код.",
        "componentsHeader": "Компоненты",
        "codeDetails": "Вы можете использовать компонент ```Code``` для демонстрации своих исходников или другого кода.",
        "expansionCodeDetails": "Если вы хотите, чтоб ваш код имел дополнительные фишки, такие как:\n* Возможность свернуть код\n* Возможность скопировать код в буфер обмена\n* Возможность добавить дополниельные действия.  \n\n\n Тогда ```ExpansionCode``` - правильный выбор.",
        "demoWithCodeDetails": "Компонент ```DemoWithCode``` используется для того, чтоб продемонстрировать функционал, который реализовывает код. Он расширяет возможности компонента [```ExpansionCode```](#<expansioncode>)"
      },
      "ImagesDemo": {
        "pageAbout": "Картинки нужны для того, чтоб визуально продемонстрировать какую-то информацию",
        "infoBlock": "Вы можете не переживать за скорость загрузки страницы из-за больших изображений. Компонент __Image__ поддерживает технологию __ленивой загрузки__."
      },
      "TextDecoratorsDemo": {
        "pageAbout": "Вы можете настроить свой текст с помощью компонентов стиля текста Material Docs.",
        "infoBlock1": "Компоненты декорации текста служат для того, чтоб сделать __информацию__ на вашей странице __более восприимчивой__.\n> Выделяйте более важную информацию в разные __специализированные блоки__.",
        "overview": "Обзор",
        "nesting": "Вложенность",
        "nestedComponents": "Вложенные компоненты",
        "nestingInfo": "Некоторые копоненты декорации поддерживают __вложенность__:"
      },
      "HeadersDemo": {
        "pageAbout": "Заголовки могут быть использованы для того, чтоб разделять информацию по смыслу.",
        "infoBlock1": "Вы можете использовать 6 видов заголовков: ```H1```, ```H2```, ```H3```, ```H4```, ```H5```. Они отличаются друг от друга размером и тем, что в заголовках размером ниже H3 по умолчанию не рисуется разделительная линия и они не добавляются в автоматически сгенерированный блок содержания страницы. Чем больше цифра в заголовке - тем меньше ег размер. Таким образом, ```H1``` - самый большой заголовок, а ```H6``` - самый маленький.",
        "headersExample": "Пример заголовков",
        "contentAutoGeneration": "Автоматическая генерация содержания страницы",
        "tagsInfo": "Для того, чтобы заголовок не создавал пункты в автоматическом содержании страницы - передайте ему __параметр__ ```noTag```. Если заголовок создаёт присутствует в содержании - при наведении на него мышью - слева будет отображаться кнопка смены якоря для удобного указания места на странице при копировании __url__.",
        "noTagInfo": "> По умолчанию, у заголовков ```H1```, ```H2```, ```H3``` __параметр__ ```noTag = false```",
        "divider": "Разделитель",
        "dividerInfo": "Для того, чтобы заголовок не имел разделительую черту - передайте ему __параметр__ ```noDivider```.",
        "noDividerInfo": "> По умолчанию, у заголовков ```H1```, ```H2```, ```H3``` __параметр__ ```noDivider = false```",
        "customAnchors": "Пользовательские якоря",
        "anchorInfo": "Вы можете задавать якорь для заголовка вручную с помощью параметра ```id```. Если он не указан - заголовок автоматически сгенерирует якорь из своего содержимого."
      },
      "MarkdownDemo": {
        "pageAbout": "Markdown - компонент, предназначенный для преобразования текста в нотации markdown в Material Docs.",
        "infoBlock1": "Markdown - это упрощенный язык разметки, которы удобно использовать для создания статей, заметок и тому подобного.",
        "overviewExample": "Обзорный пример",
        "moreInfo": "Больше информации",
        "moreInfoDetails": "Если вы хотите получить дополнительную информацию о синтаксисе markdown - смотрите [этот гайд](https://www.markdownguide.org/basic-syntax/)",
        "deepIntegration": "Глубокая интеграция",
        "infoBlock2": "Классически, __markdown__ поддреживает два вида блоков кода: строчный и блочный. В Material Docs существует три способа продемонстрировать код - с помощью компонентов: ```Code```, ```ExpansionCode```, ```DemoWithCode```. Вы можете выбирать один из этих компонентов прямо в markdown коде.",
        "codeComponents": [
          {
            "name": "Code",
            "key": "code",
            "params": [
              {
                "name": "type",
                "description": "Тип блока с кодом. Для Code - \"code\""
              },
              {
                "name": "theme",
                "description": "Параметр theme для компонента Code."
              },
              {
                "name": "language",
                "description": "Названия языкового паккета для компонента Code."
              }
            ]
          },
          {
            "name": "Expansion code",
            "key": "expansion-code",
            "params": [
              {
                "name": "type",
                "description": "Тип блока с кодом. Для ExpansionCode - \"expansion-code\""
              },
              {
                "name": "theme",
                "description": "Параметр theme для компонента Code."
              },
              {
                "name": "name",
                "description": "Параметр name для элемента ExpansionCode. Будет показан в заголовке H3."
              },
              {
                "name": "language",
                "description": "Названия языкового паккета для компонента Code."
              },
              {
                "name": "collapsedHeight",
                "description": "Параметр collapsedHeight для компонента Code. Высота блока с кодом когда он закрыт."
              }
            ]
          },
          {
            "name": "Demo with code",
            "key": "demo-with-code",
            "description": "If you want to provide ```DemoWithCode``` element with demo component, you should pass to ```Markdown``` component prop data with object. Then pass key to demo param in markdown code block and ```Markdown``` will get demo component from data.",
            "params": [
              {
                "name": "type",
                "description": "Тип блока с кодом. Для DemoWithCode - \"demo-with-code\""
              },
              {
                "name": "theme",
                "description": "Параметр theme для компонента Code."
              },
              {
                "name": "name",
                "description": "Параметр name для элемента DemoWithCode. Будет показан в заголовке H3."
              },
              {
                "name": "language",
                "description": "Названия языкового паккета для компонента Code."
              },
              {
                "name": "demo",
                "description": "Ключ переменной в объекте data."
              }
            ]
          }
        ]
      }
    },
    "common": {
      "spells": {
        "Props": "Props",
        "Import": "Импорт"
      },
      "ComponentAPI": {
        "importDifferenceText": "Вы можете узнать больше о разнице, [прочитав этот гайд](https://material-ui.com/guides/minimizing-bundle-size/).",
        "customization": "Вы можете переопределить стиль компонента благодаря одной из этих точек настройки: \n* С помощью названия правила  [```classes``` в прорпах объекта](https://material-ui.com/customization/components/#overriding-styles-with-classes). \n* С помощью [глобального имени класса](https://material-ui.com/customization/components/#overriding-styles-with-global-class-names). \n* С помощь темы и  [```overrides``` property](https://material-ui.com/customization/globals/#css). \n\n\n Если этого недостаточно, вы можете посмотреть реализацию компонента для получения более подробной информации.",
        "ruleName": "Название правила",
        "ruleDescription": "Описание",
        "propName": "Название",
        "propType": "Тип",
        "propDefault": "По умолчанию",
        "propDescription": "Описание",
        "ComponentNameHeader": "Имя компонента",
        "ref": "Объект ```ref``` передан в корневой элемент."
      }
    },
    "MaterialDocs": {
      "navigationList": {
        "content": "Содержание"
      },
      "tooltips": {
        "selectLanguage": "Выбрать язык",
        "switchTheme": "Переключить светлую/тёмную тему"
      },
      "copyright": "Создано с помощью MaterialDocs. Все права защищены.",
      "SearchField": {
        "label": "Поиск..."
      },
      "notices": {
        "codeCopied": "Кол скопирован в буфер обмена",
        "codeNotCopied": "Не удалось скопировать код в буфер обмена"
      },
      "ExpansionCode": {
        "copyToClipboard": "Скопировать код в буфер обмена",
        "expand": "Развернуть/свернуть код",
        "moreActions": "Больше действий"
      },
      "DemoWithCode": {
        "copyToClipboard": "Скопировать код в буфер обмена",
        "expand": "Развернуть/свернуть код",
        "moreActions": "Больше действий"
      }
    }
  }
}